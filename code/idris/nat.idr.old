module nat

import bool
import pair


-- Here's our data type definition.

||| A data type to represent the natural numbers.  We use a lower case
||| "n" in the name to distinguish our nat type from Idris's Nat type
data nat = O | S nat

-- HOMEWORK #3: In the REPL ask what are the types of nat, O and S.
-- Be sure you understand the answers! Teach, learning from and test
-- friends.


-- HOMEWORK #5: Make up some examples of your own. Add them below this
-- comment.



-- HOMEWORK #6: In the REPL, evaluate the types and values of z, o, t
-- and r, as well as your own values. (E.g., ":t o" will report the
-- type of o, and "o" will report its value (along with its type). Be
-- sure you understand the answers. In particular be sure you
-- understand how the variable expression, "r" is evaluated! Yup: r is
-- unfolded to S t; t is unfolded to S (S O); so the whole expression
-- unfolds to S (S (S O)). Be able to explain this evaluation process
-- verbally and in writing. Teach and test each other.

{-
The rest of this file contains functions operating on nats.
-}

||| returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero _ = false

-- HOMEWORK #7 Bind x to the result of applying isZero to r. Add your
-- code below this comment.


||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

-- HOMEWORK #8 Bind y to the result of applying succ to O. Add code here

||| returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n

{- Next we define a function that when given a natural number returns
true if it's even and false otherwise. It is very, very important to
understand this example, your first example of a recursive function -}

||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n

|||return false if the argument is otherwise true
oddb: nat -> bool
oddb n = not (evenb n)

-- HOMEWORK #9 Bind a, b, c, d, e respectively to the results of
-- applying evenb to O, (S O), (S (S O)) r, and (S r),
-- respectively. Add your code here.



--HOMEWORK #10 In English, describe all of the steps involved in
--evaluating the function application expression, evenb (S r). You
--must be able to explain this process to yourself and your friends!
--The idea is that you keep on applying reduction (simplification)
--rules until you get to a value that cannot be reduced further. Write
--your answer by filling in the following block comment.

{-First, the function checks the argument against its first two rules,

which don't apply (not O, not (S O)). The third rule does apply. By

expanding (S r)  (where r=3), the argument is exanded to (S (S (S (S

O)))), or four. the argument is now in the form  (S (S n)), where n =

(S (S O)). In this form, the evenb function now applies itself to

n. Using the same process, it reduces the argument down to (S O). Now,

the second rule of evenb applies: evenb (S O) = false.

-}


-- given a pair of natural numbers, return its sum
addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m) = addp (mkPair n (S m))

||| given a pair of natural numbers, return its products
multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = addp (mkPair (multp (mkPair n m)) m)

||| given a natural number, return its factorial
factp: nat -> nat
factp O = (S O)
factp (S n') = multp (mkPair (factp (n')) (S n'))

||| returns a minus b
subp: pair nat nat -> nat
subp (mkPair O m) = O
subp (mkPair n O) = n
subp (mkPair (S n) (S m) ) = subp (mkPair n m)

||| given x, n , return x to the nth power
exp: pair nat nat -> nat
exp (mkPair O (S n)) = O
exp (mkPair O O) = (S O)
exp (mkPair (S n) O) = (S O)
exp (mkPair (S n) (S O)) = (S n)
exp (mkPair (S n) (S m) ) = multp (mkPair (S n) (exp (mkPair (S n) m)))

|||a less than or equal to b
lep: pair nat nat -> bool
lep (mkPair O O) = true
lep (mkPair (S n) O ) = false
lep (mkPair (O) (S n) ) = true
lep (mkPair (S n) (S m) ) = lep (mkPair n m)


|||return true if a is equal to b, otherwise false
eqp: pair nat nat -> bool
eqp (mkPair O O) = true
eqp (mkPair (S n) (S m)) = eqp (mkPair n m)
eqp (mkPair (S n) O ) = false
eqp (mkPair (O) (S m)) = false

||| return true if a is greater than b
gtp: pair nat nat -> bool
gtp (mkPair a b) = not(lep (mkPair a b))

|||return true if a is greater than or equal to b
gep: pair nat nat -> bool
gep (mkPair O O) = true
gep (mkPair (S n) O) = true
gep (mkPair O (S n)) = false
gep (mkPair (S n) (S m) ) = gep (mkPair n m)

||| return true if a is less than b
ltp: pair nat nat -> bool
ltp (mkPair a b) = not( gep( mkPair a b ))

||| add without mkPair
add: nat-> (nat -> nat)
add O m = m
add (S n) m = S (add n m)

pf: nat -> nat
pf = add (S ( O))
